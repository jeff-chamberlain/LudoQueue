var game_socket = null,
	game_left_socket = null,
	game_right_socket = null,
	all_players,
	player_sockets = {},
	player_screens = {},
	game_index = 0,
	disconnect_message = "Sorry, the game has disconnected. Please reload the page later.";

exports.configGame = function(socket) {
	if(game_socket === null) {
		game_socket = socket;
		socket.on('disconnect', function() {
			game_socket = null;
			all_players.emit('err','Sorry, the game has disconnected. Please try again later');
		});
		
		socket.on('new_input_state', function(new_state) {
			all_players.emit('input_state',new_state);
		});
		
		socket.on('advance_game', function(index) {
			secondaryGameEmit('advance_game');
		});
		
		socket.on('winner', function(winner) {
			secondaryGameEmit('winner', winner);
		});
		
		socket.on('leaderboard', function(leaderboard) {
			if(game_right_socket !== null) {
				game_right_socket.emit('leaderboard', leaderboard);
			}
		});
		
		socket.on('new_game_index', function(index) {
			game_index = index;
			all_players.emit('game_index', index);
		});
		
		socket.on('player_in_game', function(data) {
			if(player_sockets.hasOwnProperty(data.id)) {
				player_sockets[data.id].emit('game_entered',data);
			}
			else {
				game_socket.emit('player_exit', data.id);
			}
		});
		
		socket.on('player_err', function(id) {
			if(player_sockets.hasOwnProperty(id)) {
				player_sockets[id].emit('err','Your device was lost. Please try again');
			}
		});
		
		socket.on('player_standby', function(id) {
			if(player_sockets.hasOwnProperty(id)) {
				player_sockets[id].emit('standby');
			}
		});
		
		socket.on('player_init_rhythm', function(data) {
			if(player_sockets.hasOwnProperty(data.id)) {
				player_sockets[data.id].emit('init_rhythm', data.rhythm);
			}
		});
		
		socket.on('leaderboard', function(data) {
			if(game_left_socket !== null) {
				game_left_socket.emit('leaderboard', data);
			}
		});
		
		socket.on('change_screen', function(data) {
			changeScreen(data.player, data.screen);
		});
		
		socket.on('screen_exit', function(data) {
			if(data.screen === -1 && game_left_socket !== null) {
				game_left_socket.emit('screen_exit', data.id);
			}
			else if(data.screen === 1 && game_right_socket !== null) {
				game_right_socket.emit('screen_exit', data.id);
			}
		});
		
		socket.on('reset_screens', function() {
			for(var id in player_screens) {
				player_screens[id] = 0;
			}
		});
	}
	else {
		socket.emit('err', {message: 'A game already exists'});
	}
}

exports.configPlayer = function(config) {

	player_sockets[config.id] = config.socket;
	player_screens[config.id] = 0;
	
	config.socket.on('enter', function(data) {
		checkGame(config.socket,'Sorry, there is currently no game to connect to', function(){
			game_socket.emit('player_enter', {id: config.id, name: data.name, email: data.email});
		});
	});
	
	config.socket.on('tilt', function(data) {
		checkGame(config.socket,disconnect_message, function(){
			game_socket.emit('player_tilt', {id: config.id, tilt: data});
		});
	});
	
	config.socket.on('tap', function(data) {
		checkGame(config.socket,disconnect_message, function(){
			game_socket.emit('player_tap', config.id);
		});
	});
	
	config.socket.on('swype', function(data) {
		screenSwype(config.id, config.socket, data);
	});
	
	config.socket.on('rhythm', function(data) {
		checkGame(config.socket,disconnect_message, function(){
			game_socket.emit('player_rhythm', {id: config.id, ave: data});
		});
	});
	
	config.socket.on('change_screen', function(data) {
		changeScreen(data.player, data.screen);
	});
	
	config.socket.on('disconnect', function() {
		if(game_socket !== null ) {
			game_socket.emit('player_exit', config.id);
		}
		if(player_sockets.hasOwnProperty(config.id)) {
			delete player_sockets[config.id];
		}
		if(player_screens.hasOwnProperty(config.id)) {
			delete player_screens[config.id];
		}
	});
	
	config.socket.emit('game_index', game_index);
}

exports.setAllPlayers = function(sockets) {
	all_players = sockets;
}

exports.configGameLeft = function(socket) {
	if(game_left_socket === null) {
		game_left_socket = socket;
		
		socket.on('disconnect', function() {
			game_left_socket = null;
		});
		
		socket.on('change_screen', function(player) {
			changeScreen(player, 0);
		});
		
		socket.emit('set_game', game_index);
	}
	else {
		socket.emit('err');
	}
}

exports.configGameRight = function(socket) {
	if(game_right_socket === null) {
		game_right_socket = socket;
		
		socket.on('disconnect', function() {
			game_right_socket = null;
		});
		
		socket.on('change_screen', function(player) {
			changeScreen(player, 0);
		});
		
		socket.emit('set_game', game_index);
	}
	else {
		socket.emit('err');
	}
}

function checkGame(socket,data,callback) {
	if(game_socket === null) {
		socket.emit('err',data);
	}
	else {
		callback();
	}
}

function screenSwype(id, socket, data) {
	var index = player_screens[id];
	switch(index) {
		case -1:
			if(game_left_socket !== null) {
				game_left_socket.emit('player_swype', {id: id, swype: data});
			}
			else {
				checkGame(socket,disconnect_message, function(){
					game_socket.emit('screen_add', player);
					player_screens[player.id] = 0;
				});
			}
			break;
		case 1:
			if(game_right_socket !== null) {
				game_right_socket.emit('player_swype', {id: id, swype: data});
			}
			else {
				checkGame(socket,disconnect_message, function(){
					game_socket.emit('screen_add', player);
					player_screens[player.id] = 0;
				});
			}
			break;
		default:
			checkGame(socket,disconnect_message, function(){
				game_socket.emit('player_swype', {id: id, swype: data});
			});
			break;
	}
}

function changeScreen(player, index) {
	if(player_sockets.hasOwnProperty(player.id)) {
		var socket = player_sockets[player.id];
		switch(index) {
			case -1:
				if(game_left_socket !== null) {
					game_left_socket.emit('screen_add', player);
					player_screens[player.id] = -1;
				}
				else {
					checkGame(socket,disconnect_message, function(){
						game_socket.emit('screen_add', player);
						player_screens[player.id] = 0;
					});
				}
				break;
			case 1:
				if(game_right_socket !== null) {
					game_right_socket.emit('screen_add', player);
					player_screens[player.id] = 1;
				}
				else {
					checkGame(socket,disconnect_message, function(){
						game_socket.emit('screen_add', player);
						player_screens[player.id] = 0;
					});
				}
				break;
			default:
				checkGame(socket,disconnect_message, function(){
					game_socket.emit('screen_add', player);
					player_screens[player.id] = 0;
				});
				break;
		}
	}
}

function secondaryGameEmit(message,data) {
	if(game_left_socket !== null) {
		game_left_socket.emit(message,data);
	}
	if(game_right_socket !== null) {
		game_right_socket.emit(message,data);
	}
}